import fs from "fs";
import fs_extra from "fs-extra";
import path from "path";
import dirnames from "./dirnames.js";
//
export default {
  build_tools_ts: async function () {
    let get_tool_import_total_template = `
// THIS FILE IS AUTO-GENERATED by 'tools.js'
export default async function get_tool_import(name) {
//
***
//
}
`;

    let get_tool_import_item_template = `
//
if ( name === "***" ) {
  let [ tool_json, page ] = await Promise.all([
    import( "@shared/tools/***/tool.json" ),
    import( "@shared/tools/***/Page.vue" )
  ])
  //
  let tool:any = {
    ...tool_json.default,
    name,
    page: page.default
  }
  return tool
}
//
`;

    let get_team_import_total_template = `
// THIS FILE IS AUTO-GENERATED by 'tools.js'
export default async function get_team_import(team_name) {
//
***
//
}
`;

    let get_team_import_item_template = `
if (team_name === "***") {
  return import("@shared/teams/***/frontend/main");
}
`;

    // generate get_tool_import.ts
    {
      let get_tool_import_total_code = "";
      let tools_json = [];
      let tool_names = fs.readdirSync(path.resolve(dirnames.shared, "tools"));
      console.log(tool_names);
      for (let tool_name of tool_names) {
        //
        let tool_json = JSON.parse(fs.readFileSync(path.resolve(dirnames.shared, "tools", tool_name, "tool.json")));
        console.log("tool_json", tool_json);
        tool_json.name = tool_name;
        tool_json.priority = 1;
        let icon_path = path.resolve(dirnames.shared, "tools", tool_name, "icon.svg");
        if (fs.existsSync(icon_path)) {
          tool_json.icon_exists = true;
        } else {
          tool_json.icon_exists = false;
        }
        tools_json.push(tool_json);
        //
        let item_code = get_tool_import_item_template.replaceAll("***", tool_name);
        get_tool_import_total_code += item_code;
        //
      }
      let get_tool_import_file = get_tool_import_total_template.replace("***", get_tool_import_total_code);
      //
      fs.writeFileSync(path.resolve(dirnames.shared, "extensions", "chromane", "vue", "get_tool_import.ts"), get_tool_import_file);
      fs.writeFileSync(path.resolve(dirnames.shared, "extensions", "chromane", "vue", "tools.json"), JSON.stringify(tools_json, null, "  "));
      //
    }
    // generate get_team_import.ts
    {
      let get_team_import_total_code = "";
      let team_names = fs.readdirSync(path.resolve(dirnames.shared, "teams"));
      console.log(team_names);
      for (let team_name of team_names) {
        let item_code = get_team_import_item_template.replaceAll("***", team_name);
        get_team_import_total_code += item_code;
      }
      let get_team_import_file = get_team_import_total_template.replace("***", get_team_import_total_code);
      //
      fs.writeFileSync(path.resolve(dirnames.shared, "extensions", "chromane", "vue", "get_team_import.ts"), get_team_import_file);
      //
    }
    // copy static files from each tool folder;
    {
      let tool_names = fs.readdirSync(path.resolve(dirnames.shared, "tools"));
      console.log(tool_names);
      for (let tool_name of tool_names) {
        // move static file if it exists
        let tool_static_path = path.resolve(dirnames.shared, "tools", tool_name, "static");
        if (fs.existsSync(tool_static_path)) {
          fs_extra.copySync(
            //
            path.resolve(tool_static_path),
            path.resolve(dirnames.static, "tools", tool_name)
          );
        }
        // move icon file if it exists
        let tool_icon_path = path.resolve(dirnames.shared, "tools", tool_name, "icon.svg");
        if (fs.existsSync(tool_icon_path)) {
          fs_extra.copySync(
            //
            path.resolve(tool_icon_path),
            path.resolve(dirnames.static, "tools", tool_name, "icon.svg")
          );
        }
      }
    }
    // copy static files from each team folder;
    {
      let team_names = fs.readdirSync(path.resolve(dirnames.shared, "teams"));
      console.log(team_names);
      for (let team_name of team_names) {
        let team_static_path = path.resolve(dirnames.shared, "teams", team_name, "static");
        if (fs.existsSync(team_static_path)) {
          fs_extra.copySync(
            //
            path.resolve(team_static_path),
            path.resolve(dirnames.static, "teams", team_name)
          );
        } else {
        }
      }
    }
    //
  },
};
